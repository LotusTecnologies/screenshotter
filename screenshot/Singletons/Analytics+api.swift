// STOP!  DO not edit the file below
// only create by auto generting
// created from: 4500f93 
//  Copyright (c) 2018 crazeapp. All rights reserved.


import Foundation
import FBSDKCoreKit



typealias AnalyticsAppOpenedFirstTime = Analytics
extension AnalyticsAppOpenedFirstTime {
    
  static func trackAppOpenedFirstTime() {
      let key = "app-openedFirstTime"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCreditCardAdded = Analytics
extension AnalyticsCartCreditCardAdded {
  enum AnalyticsCartCreditCardAddedSource : String{
    case `manual` = "manual"
    case `onboarding` = "onboarding"
    }
    
  static func trackCartCreditCardAdded(cart:Cart?,  source:AnalyticsCartCreditCardAddedSource,  numberOfCards:Int,  isSave:Bool ) {
      let key = "cart-creditCard-added"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["source"] = source.rawValue
      properties["numberOfCards"] = NSNumber.init(value: numberOfCards)
      properties["isSave"] = NSNumber.init(value: isSave)
            
      var fbProperties:[AnyHashable:Any] = [:]
      fbProperties[FBSDKAppEventParameterNameSuccess] = FBSDKAppEventParameterValueYes
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameAddedPaymentInfo, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCreditCardEdited = Analytics
extension AnalyticsCartCreditCardEdited {
    
  static func trackCartCreditCardEdited(cart:Cart? ) {
      let key = "cart-creditCard-edited"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCreditCardRemoved = Analytics
extension AnalyticsCartCreditCardRemoved {
    
  static func trackCartCreditCardRemoved(cart:Cart? ) {
      let key = "cart-creditCard-removed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCvvCanceled = Analytics
extension AnalyticsCartCvvCanceled {
    
  static func trackCartCvvCanceled(cart:Cart? ) {
      let key = "cart-cvv-canceled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-cvv-canceled-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCvvEntered = Analytics
extension AnalyticsCartCvvEntered {
  enum AnalyticsCartCvvEnteredResult : String{
    case `needsCreditCard` = "needs credit card"
    case `needsShippingAddress` = "needs shipping address"
    case `cvvInvalidOrEmpty` = "cvv invalid or empty"
    case `continue` = "continue"
    }
    
  static func trackCartCvvEntered(cart:Cart?,  result:AnalyticsCartCvvEnteredResult ) {
      let key = "cart-cvv-entered"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["result"] = result.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-cvv-entered-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                properties["result"] = result.rawValue
                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartCvvWhatsThis = Analytics
extension AnalyticsCartCvvWhatsThis {
    
  static func trackCartCvvWhatsThis() {
      let key = "cart-cvv-whatsThis"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartEmptyPressedButton = Analytics
extension AnalyticsCartEmptyPressedButton {
    
  static func trackCartEmptyPressedButton() {
      let key = "cart-empty-pressedButton"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartError = Analytics
extension AnalyticsCartError {
    
  static func trackCartError(cart:Cart?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "cart-error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-error-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                if let domain = domain {
                    properties["domain"] = domain
                }
                if let code = code {
                    properties["code"] = NSNumber.init(value: code)
                }
                if let localizedDescription = localizedDescription {
                    properties["localizedDescription"] = localizedDescription
                }
                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPressedCancelCheckout = Analytics
extension AnalyticsCartPressedCancelCheckout {
    
  static func trackCartPressedCancelCheckout(cart:Cart? ) {
      let key = "cart-pressedCancelCheckout"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPressedCheckoutValidated = Analytics
extension AnalyticsCartPressedCheckoutValidated {
  enum AnalyticsCartPressedCheckoutValidatedResult : String{
    case `needsCreditCard` = "needs credit card"
    case `needsShippingAddress` = "needs shipping address"
    case `needsCvv` = "needs cvv"
    case `continue` = "continue"
    }
    
  static func trackCartPressedCheckoutValidated(cart:Cart?,  result:AnalyticsCartPressedCheckoutValidatedResult ) {
      let key = "cart-pressedCheckout-validated"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["result"] = result.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-pressedCheckout-validated-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                properties["result"] = result.rawValue
                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPressedCheckout = Analytics
extension AnalyticsCartPressedCheckout {
    
  static func trackCartPressedCheckout(cart:Cart? ) {
      let key = "cart-pressedCheckout"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      fbProperties[FBSDKAppEventParameterNameSuccess] = FBSDKAppEventParameterValueYes
      
      if let value = properties["cart-items"] {
        fbProperties[FBSDKAppEventParameterNameNumItems] = value
      }
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameInitiatedCheckout, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-pressedCheckout-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPressedConfirmOrder = Analytics
extension AnalyticsCartPressedConfirmOrder {
  enum AnalyticsCartPressedConfirmOrderResult : String{
    case `needsCreditCard` = "needs credit card"
    case `needsShippingAddress` = "needs shipping address"
    case `needsCvv` = "needs cvv"
    case `continue` = "continue"
    }
    
  static func trackCartPressedConfirmOrder(cart:Cart?,  result:AnalyticsCartPressedConfirmOrderResult ) {
      let key = "cart-pressedConfirmOrder"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["result"] = result.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-pressedConfirmOrder-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                properties["result"] = result.rawValue
                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPressedPlaceOrder = Analytics
extension AnalyticsCartPressedPlaceOrder {
  enum AnalyticsCartPressedPlaceOrderResult : String{
    case `needsCreditCard` = "needs credit card"
    case `needsShippingAddress` = "needs shipping address"
    case `needsCvv` = "needs cvv"
    case `continue` = "continue"
    }
    
  static func trackCartPressedPlaceOrder(cart:Cart?,  result:AnalyticsCartPressedPlaceOrderResult ) {
      let key = "cart-pressedPlaceOrder"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["result"] = result.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

      let subItemKey = "cart-pressedPlaceOrder-perItem"
      cart?.items?.forEach({ (i) in
            if let i = i as? CartItem {

                var properties:[String:Any] = [:]
                propertiesFor(i).forEach { properties[$0] = $1 }

                properties["result"] = result.rawValue
                      

                AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)

                AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(subItemKey, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
            }
      })


      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartPurchaseCompleted = Analytics
extension AnalyticsCartPurchaseCompleted {
    
  static func trackCartPurchaseCompleted(cart:Cart?,  cardEmail:String?,  cardFullName:String? ) {
      let key = "cart-purchaseCompleted"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      if let cardEmail = cardEmail {
          properties["cardEmail"] = cardEmail
      }
      if let cardFullName = cardFullName {
          properties["cardFullName"] = cardFullName
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartShippingAdded = Analytics
extension AnalyticsCartShippingAdded {
  enum AnalyticsCartShippingAddedSource : String{
    case `manual` = "manual"
    case `onboarding` = "onboarding"
    case `sameAsBilling` = "same as billing"
    }
    
  static func trackCartShippingAdded(cart:Cart?,  source:AnalyticsCartShippingAddedSource,  numberOfAddresses:Int ) {
      let key = "cart-shipping-added"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
      properties["source"] = source.rawValue
      properties["numberOfAddresses"] = NSNumber.init(value: numberOfAddresses)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartShippingEdited = Analytics
extension AnalyticsCartShippingEdited {
    
  static func trackCartShippingEdited(cart:Cart? ) {
      let key = "cart-shipping-edited"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCartShippingRemoved = Analytics
extension AnalyticsCartShippingRemoved {
    
  static func trackCartShippingRemoved(cart:Cart? ) {
      let key = "cart-shipping-removed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cart = cart {
          propertiesFor(cart).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAPNDisabled = Analytics
extension AnalyticsAPNDisabled {
    
  static func trackAPNDisabled(token:String? ) {
      let key = "APN Disabled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let token = token {
          properties["token"] = token
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAPNEnabled = Analytics
extension AnalyticsAPNEnabled {
    
  static func trackAPNEnabled(token:String? ) {
      let key = "APN Enabled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let token = token {
          properties["token"] = token
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAppOpenedFromLocalNotification = Analytics
extension AnalyticsAppOpenedFromLocalNotification {
    
  static func trackAppOpenedFromLocalNotification() {
      let key = "app opened from local notification"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAppSentLocalPushNotification = Analytics
extension AnalyticsAppSentLocalPushNotification {
    
  static func trackAppSentLocalPushNotification() {
      let key = "app sent local push notification"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowErrorGetProducts = Analytics
extension AnalyticsDevBurrowErrorGetProducts {
    
  static func trackDevBurrowErrorGetProducts(shoppable:Shoppable?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "dev-burrow-error-getProducts"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowErrorGetShoppable = Analytics
extension AnalyticsDevBurrowErrorGetShoppable {
    
  static func trackDevBurrowErrorGetShoppable(productImageUrl:String?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "dev-burrow-error-getShoppable"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let productImageUrl = productImageUrl {
          properties["productImageUrl"] = productImageUrl
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowErrorNoProducts = Analytics
extension AnalyticsDevBurrowErrorNoProducts {
    
  static func trackDevBurrowErrorNoProducts(shoppable:Shoppable? ) {
      let key = "dev-burrow-error-noProducts"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowErrorNoShoppables = Analytics
extension AnalyticsDevBurrowErrorNoShoppables {
    
  static func trackDevBurrowErrorNoShoppables(productImageUrl:String? ) {
      let key = "dev-burrow-error-noShoppables"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let productImageUrl = productImageUrl {
          properties["productImageUrl"] = productImageUrl
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowSelectedShoppableMismatch = Analytics
extension AnalyticsDevBurrowSelectedShoppableMismatch {
    
  static func trackDevBurrowSelectedShoppableMismatch(rootShoppableLabel:String,  productImageUrl:String?,  selectedShoppableLabel:String?,  otherLabels:String? ) {
      let key = "dev-burrow-selectedShoppable-mismatch"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["rootShoppableLabel"] = rootShoppableLabel
      if let productImageUrl = productImageUrl {
          properties["productImageUrl"] = productImageUrl
      }
      if let selectedShoppableLabel = selectedShoppableLabel {
          properties["selectedShoppableLabel"] = selectedShoppableLabel
      }
      if let otherLabels = otherLabels {
          properties["otherLabels"] = otherLabels
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevBurrowSelectedShoppable = Analytics
extension AnalyticsDevBurrowSelectedShoppable {
    
  static func trackDevBurrowSelectedShoppable(rootShoppableLabel:String,  productImageUrl:String?,  selectedShoppableLabel:String?,  otherLabels:String? ) {
      let key = "dev-burrow-selectedShoppable"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["rootShoppableLabel"] = rootShoppableLabel
      if let productImageUrl = productImageUrl {
          properties["productImageUrl"] = productImageUrl
      }
      if let selectedShoppableLabel = selectedShoppableLabel {
          properties["selectedShoppableLabel"] = selectedShoppableLabel
      }
      if let otherLabels = otherLabels {
          properties["otherLabels"] = otherLabels
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsBypassedClarifaiOnRetry = Analytics
extension AnalyticsBypassedClarifaiOnRetry {
    
  static func trackBypassedClarifaiOnRetry() {
      let key = "bypassed Clarifai on retry"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsBypassedClarifai = Analytics
extension AnalyticsBypassedClarifai {
    
  static func trackBypassedClarifai() {
      let key = "bypassed Clarifai"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFinishedDownloadingClarifaiModel = Analytics
extension AnalyticsFinishedDownloadingClarifaiModel {
    
  static func trackFinishedDownloadingClarifaiModel() {
      let key = "finished downloading Clarifai model"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsStartedDownloadingClarifaiModel = Analytics
extension AnalyticsStartedDownloadingClarifaiModel {
    
  static func trackStartedDownloadingClarifaiModel() {
      let key = "started downloading Clarifai model"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsReceivedResponseFromClarifai = Analytics
extension AnalyticsReceivedResponseFromClarifai {
    
  static func trackReceivedResponseFromClarifai(isFashion:Bool,  isFurniture:Bool ) {
      let key = "received response from Clarifai"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["isFashion"] = NSNumber.init(value: isFashion)
      properties["isFurniture"] = NSNumber.init(value: isFurniture)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSentImageToClarifai = Analytics
extension AnalyticsSentImageToClarifai {
    
  static func trackSentImageToClarifai() {
      let key = "sent image to Clarifai"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsErrImgHang = Analytics
extension AnalyticsErrImgHang {
    
  static func trackErrImgHang(reason:String? ) {
      let key = "err img hang"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let reason = reason {
          properties["reason"] = reason
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsError = Analytics
extension AnalyticsError {
  enum AnalyticsErrorType : String{
    case `noHardDriveSpace` = "noHardDriveSpace"
    }
    
  static func trackError(type:AnalyticsErrorType?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "Error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let type = type {
          properties["type"] = type.rawValue
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevLog = Analytics
extension AnalyticsDevLog {
    
  static func trackDevLog(file:String?,  line:Int?,  message:String? ) {
      let key = "Log"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let file = file {
          properties["file"] = file
      }
      if let line = line {
          properties["line"] = NSNumber.init(value: line)
      }
      if let message = message {
          properties["message"] = message
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevLoginUnexpectedError = Analytics
extension AnalyticsDevLoginUnexpectedError {
    
  static func trackDevLoginUnexpectedError(domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "dev-login-unexpectedError"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDevMemoryWarning = Analytics
extension AnalyticsDevMemoryWarning {
    
  static func trackDevMemoryWarning() {
      let key = "dev-memoryWarning"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOpenedWithRemoteNotification = Analytics
extension AnalyticsOpenedWithRemoteNotification {
    
  static func trackOpenedWithRemoteNotification(fromIntercom:Bool? ) {
      let key = "Opened with remote notification"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let fromIntercom = fromIntercom {
          properties["fromIntercom"] = NSNumber.init(value: fromIntercom)
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsReceivedRemoteNotification = Analytics
extension AnalyticsReceivedRemoteNotification {
    
  static func trackReceivedRemoteNotification(fromIntercom:Bool? ) {
      let key = "Received remote notification"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let fromIntercom = fromIntercom {
          properties["fromIntercom"] = NSNumber.init(value: fromIntercom)
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsRefreshedWebpage = Analytics
extension AnalyticsRefreshedWebpage {
    
  static func trackRefreshedWebpage(url:String? ) {
      let key = "Refreshed webpage"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let url = url {
          properties["url"] = url
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSentImageToSyte = Analytics
extension AnalyticsSentImageToSyte {
    
  static func trackSentImageToSyte() {
      let key = "sent image to Syte"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSessionEnded = Analytics
extension AnalyticsSessionEnded {
    
  static func trackSessionEnded() {
      let key = "sessionEnded"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSessionStarted = Analytics
extension AnalyticsSessionStarted {
    
  static func trackSessionStarted() {
      let key = "sessionStarted"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsReceivedResponseFromSyte = Analytics
extension AnalyticsReceivedResponseFromSyte {
    
  static func trackReceivedResponseFromSyte(imageUrl:String?,  segmentCount:Int?,  categories:String? ) {
      let key = "received response from Syte"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let imageUrl = imageUrl {
          properties["imageUrl"] = imageUrl
      }
      if let segmentCount = segmentCount {
          properties["segmentCount"] = NSNumber.init(value: segmentCount)
      }
      if let categories = categories {
          properties["categories"] = categories
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsReceivedUploadErrorFromSyte = Analytics
extension AnalyticsReceivedUploadErrorFromSyte {
    
  static func trackReceivedUploadErrorFromSyte(imageUrl:String?,  httpStatusCode:Int?,  reason:String? ) {
      let key = "received upload error from Syte"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let imageUrl = imageUrl {
          properties["imageUrl"] = imageUrl
      }
      if let httpStatusCode = httpStatusCode {
          properties["httpStatusCode"] = NSNumber.init(value: httpStatusCode)
      }
      if let reason = reason {
          properties["reason"] = reason
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsReceivedProductsFromSyte = Analytics
extension AnalyticsReceivedProductsFromSyte {
    
  static func trackReceivedProductsFromSyte(productCount:Int?,  optionsMask:Int? ) {
      let key = "received products from Syte"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let productCount = productCount {
          properties["productCount"] = NSNumber.init(value: productCount)
      }
      if let optionsMask = optionsMask {
          properties["optionsMask"] = NSNumber.init(value: optionsMask)
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTabBarTapped = Analytics
extension AnalyticsTabBarTapped {
    
  static func trackTabBarTapped(tab:String ) {
      let key = "Tab Bar tapped"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["tab"] = tab
            




      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:[])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsUserProperties = Analytics
extension AnalyticsUserProperties {
    
  static func trackUserProperties(analyticsUser:AnalyticsUser? ) {
      let key = "User Properties"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let analyticsUser = analyticsUser {
          propertiesFor(analyticsUser).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsUserRetriedScreenshots = Analytics
extension AnalyticsUserRetriedScreenshots {
    
  static func trackUserRetriedScreenshots() {
      let key = "user retried screenshots"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsWebViewInvalidUrl = Analytics
extension AnalyticsWebViewInvalidUrl {
    
  static func trackWebViewInvalidUrl(url:String? ) {
      let key = "WebView invalid url"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let url = url {
          properties["url"] = url
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsWokeFromSilentPush = Analytics
extension AnalyticsWokeFromSilentPush {
    
  static func trackWokeFromSilentPush() {
      let key = "Woke From Silent Push"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSetFiler = Analytics
extension AnalyticsSetFiler {
    
  static func trackSetFiler(name:String,  newValue:String ) {
      let key = String.init(format: "Set %@ Filter to %@" , name,newValue)
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["name"] = name
      properties["newValue"] = newValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSetGlobalGenderFiler = Analytics
extension AnalyticsSetGlobalGenderFiler {
    
  static func trackSetGlobalGenderFiler(gender:String ) {
      let key = String.init(format: "Set Global Gender Filter to %@" , gender)
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["gender"] = gender
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSetGlobalSizeFiler = Analytics
extension AnalyticsSetGlobalSizeFiler {
    
  static func trackSetGlobalSizeFiler(size:String ) {
      let key = String.init(format: "Set Global Size Filter to %@" , size)
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["size"] = size
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTappedOnSegmentedControl = Analytics
extension AnalyticsTappedOnSegmentedControl {
    
  static func trackTappedOnSegmentedControl(selectedSegmentTitle:String ) {
      let key = String.init(format: "Tapped %@ Picker List" , selectedSegmentTitle)
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["selectedSegmentTitle"] = selectedSegmentTitle
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOpenedFiltersView = Analytics
extension AnalyticsOpenedFiltersView {
    
  static func trackOpenedFiltersView() {
      let key = "Opened Filters View"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotNotificationAccepted = Analytics
extension AnalyticsScreenshotNotificationAccepted {
    
  static func trackScreenshotNotificationAccepted(screenshotCount:Int ) {
      let key = "Screenshot notification accepted"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["Screenshot count"] = NSNumber.init(value: screenshotCount)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotNotificationCancelled = Analytics
extension AnalyticsScreenshotNotificationCancelled {
    
  static func trackScreenshotNotificationCancelled(screenshotCount:Int ) {
      let key = "Screenshot notification cancelled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["Screenshot count"] = NSNumber.init(value: screenshotCount)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsInAppPurchase = Analytics
extension AnalyticsInAppPurchase {
  enum AnalyticsInAppPurchasePurchase : String{
    case `stylists` = "stylists"
    }
  enum AnalyticsInAppPurchaseType : String{
    case `onetime` = "onetime"
    }
    
  static func trackInAppPurchase(purchase:AnalyticsInAppPurchasePurchase,  type:AnalyticsInAppPurchaseType,  price:String ) {
      let key = "InAppPurchase"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["purchase"] = purchase.rawValue
      properties["type"] = type.rawValue
      properties["price"] = price
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsRequestedCustomStylist = Analytics
extension AnalyticsRequestedCustomStylist {
    
  static func trackRequestedCustomStylist(shoppable:Shoppable? ) {
      let key = "Requested Custom Stylist"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["screenshotImageURL"] == nil {
            properties["screenshotImageURL"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeaturePasswordIsPassword = Analytics
extension AnalyticsFeaturePasswordIsPassword {
    
  static func trackFeaturePasswordIsPassword() {
      let key = "feature-password_is_password"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCanceledPhotoCreation = Analytics
extension AnalyticsCanceledPhotoCreation {
    
  static func trackCanceledPhotoCreation() {
      let key = "Canceled Photo Creation"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsCreatedPhoto = Analytics
extension AnalyticsCreatedPhoto {
    
  static func trackCreatedPhoto() {
      let key = "Created Photo"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsImportedPhotos = Analytics
extension AnalyticsImportedPhotos {
  enum AnalyticsImportedPhotosSection : String{
    case `screenshots` = "Screenshots"
    case `gallery` = "Gallery"
    }
    
  static func trackImportedPhotos(section:AnalyticsImportedPhotosSection,  count:Int ) {
      let key = "Imported Photos"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["Section"] = section.rawValue
      properties["Count"] = NSNumber.init(value: count)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsIgnoredRatingOnAppStore = Analytics
extension AnalyticsIgnoredRatingOnAppStore {
    
  static func trackIgnoredRatingOnAppStore() {
      let key = "Ignored rating on AppStore"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsRatedAppOnAppStore = Analytics
extension AnalyticsRatedAppOnAppStore {
    
  static func trackRatedAppOnAppStore() {
      let key = "Rated app on app store"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsIgnoredRatingInApp = Analytics
extension AnalyticsIgnoredRatingInApp {
    
  static func trackIgnoredRatingInApp() {
      let key = "Ignored rating in app"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsRatedApp = Analytics
extension AnalyticsRatedApp {
    
  static func trackRatedApp(rating:String? ) {
      let key = "Rated app"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let rating = rating {
          properties["rating"] = rating
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      fbProperties[FBSDKAppEventParameterNameMaxRatingValue] = 5
      
      if let valueToSum = properties["rating"] as? Double {
        FBSDKAppEvents.logEvent(FBSDKAppEventNameRated, valueToSum:valueToSum,  parameters: fbProperties)
      }else{
        FBSDKAppEvents.logEvent(FBSDKAppEventNameRated, parameters: fbProperties)
      }


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureRecoveryAppeared = Analytics
extension AnalyticsFeatureRecoveryAppeared {
  enum AnalyticsFeatureRecoveryAppearedReason : String{
    case `longPress` = "longPress"
    case `returnedFromProductLink` = "returnedFromProductLink"
    case `forceTouch` = "forceTouch"
    }
    
  static func trackFeatureRecoveryAppeared(product:Product?,  secondsSinceLeftApp:Int?,  abTestColor:String,  abTestHeadline:String,  abTestButton:String,  reason:AnalyticsFeatureRecoveryAppearedReason ) {
      let key = "feature-recovery-appeared"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let secondsSinceLeftApp = secondsSinceLeftApp {
          properties["secondsSinceLeftApp"] = NSNumber.init(value: secondsSinceLeftApp)
      }
      properties["abTestColor"] = abTestColor
      properties["abTestHeadline"] = abTestHeadline
      properties["abTestButton"] = abTestButton
      properties["reason"] = reason.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureRecoveryDismissBlocked = Analytics
extension AnalyticsFeatureRecoveryDismissBlocked {
    
  static func trackFeatureRecoveryDismissBlocked(product:Product? ) {
      let key = "feature-recovery-dismiss_blocked"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureRecoveryEmailPrompt = Analytics
extension AnalyticsFeatureRecoveryEmailPrompt {
    
  static func trackFeatureRecoveryEmailPrompt(product:Product?,  hasEmail:Bool ) {
      let key = "feature-recovery-email-prompt"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      properties["hasEmail"] = NSNumber.init(value: hasEmail)
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureRecoveryEmailSent = Analytics
extension AnalyticsFeatureRecoveryEmailSent {
    
  static func trackFeatureRecoveryEmailSent(product:Product? ) {
      let key = "feature-recovery-email-sent"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTookScreenshot = Analytics
extension AnalyticsTookScreenshot {
    
  static func trackTookScreenshot() {
      let key = "Took Screenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTookScreenshotWhileShowingIntercomWindow = Analytics
extension AnalyticsTookScreenshotWhileShowingIntercomWindow {
    
  static func trackTookScreenshotWhileShowingIntercomWindow() {
      let key = "Took Screenshot While Showing Intercom Window"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureScreenshotPreviewPeek = Analytics
extension AnalyticsFeatureScreenshotPreviewPeek {
    
  static func trackFeatureScreenshotPreviewPeek(screenshot:Screenshot? ) {
      let key = "feature-screenshotPreview-peek"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsFeatureScreenshotPreviewPop = Analytics
extension AnalyticsFeatureScreenshotPreviewPop {
    
  static func trackFeatureScreenshotPreviewPop(screenshot:Screenshot? ) {
      let key = "feature-screenshotPreview-pop"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAcceptedPushPermissions = Analytics
extension AnalyticsAcceptedPushPermissions {
    
  static func trackAcceptedPushPermissions() {
      let key = "Accepted Push Permissions"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsDeniedPushPermissions = Analytics
extension AnalyticsDeniedPushPermissions {
    
  static func trackDeniedPushPermissions() {
      let key = "Denied Push Permissions"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingUnsupportedError = Analytics
extension AnalyticsOnboardingUnsupportedError {
    
  static func trackOnboardingUnsupportedError(domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "onboarding-unsupportedError"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingError = Analytics
extension AnalyticsOnboardingError {
    
  static func trackOnboardingError(domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "onboarding-error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingFacebookStarted = Analytics
extension AnalyticsOnboardingFacebookStarted {
  enum AnalyticsOnboardingFacebookStartedSource : String{
    case `onboarding` = "onboarding"
    case `profileShortcutButton` = "profileShortcutButton"
    case `profileLoginPage` = "profileLoginPage"
    }
    
  static func trackOnboardingFacebookStarted(source:AnalyticsOnboardingFacebookStartedSource ) {
      let key = "onboarding-facebook-started"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["source"] = source.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingFacebookSuccess = Analytics
extension AnalyticsOnboardingFacebookSuccess {
  enum AnalyticsOnboardingFacebookSuccessSource : String{
    case `onboarding` = "onboarding"
    case `profileShortcutButton` = "profileShortcutButton"
    case `profileLoginPage` = "profileLoginPage"
    }
    
  static func trackOnboardingFacebookSuccess(isReturning:Bool?,  source:AnalyticsOnboardingFacebookSuccessSource ) {
      let key = "onboarding-facebook-success"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let isReturning = isReturning {
          properties["isReturning"] = NSNumber.init(value: isReturning)
      }
      properties["source"] = source.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingForgotEmailSend = Analytics
extension AnalyticsOnboardingForgotEmailSend {
    
  static func trackOnboardingForgotEmailSend() {
      let key = "onboarding-forgot-emailSend"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingForgotStarted = Analytics
extension AnalyticsOnboardingForgotStarted {
    
  static func trackOnboardingForgotStarted(email:String? ) {
      let key = "onboarding-forgot-started"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let email = email {
          properties["email"] = email
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingForgotSubmited = Analytics
extension AnalyticsOnboardingForgotSubmited {
    
  static func trackOnboardingForgotSubmited(email:String? ) {
      let key = "onboarding-forgot-submited"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let email = email {
          properties["email"] = email
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingForgotSuccess = Analytics
extension AnalyticsOnboardingForgotSuccess {
    
  static func trackOnboardingForgotSuccess() {
      let key = "onboarding-forgot-success"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingGdpr = Analytics
extension AnalyticsOnboardingGdpr {
    
  static func trackOnboardingGdpr(agreedToEmail:Bool?,  agreedToImageDetection:Bool? ) {
      let key = "onboarding-gdpr"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let agreedToEmail = agreedToEmail {
          properties["agreedToEmail"] = NSNumber.init(value: agreedToEmail)
      }
      if let agreedToImageDetection = agreedToImageDetection {
          properties["agreedToImageDetection"] = NSNumber.init(value: agreedToImageDetection)
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingLoginBadEmail = Analytics
extension AnalyticsOnboardingLoginBadEmail {
    
  static func trackOnboardingLoginBadEmail(email:String? ) {
      let key = "onboarding-login-badEmail"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let email = email {
          properties["email"] = email
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingLoginBadPassword = Analytics
extension AnalyticsOnboardingLoginBadPassword {
    
  static func trackOnboardingLoginBadPassword() {
      let key = "onboarding-login-badPassword"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingLoginError = Analytics
extension AnalyticsOnboardingLoginError {
    
  static func trackOnboardingLoginError(domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "onboarding-login-error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingLoginStarted = Analytics
extension AnalyticsOnboardingLoginStarted {
    
  static func trackOnboardingLoginStarted() {
      let key = "onboarding-login-started"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingLoginSucess = Analytics
extension AnalyticsOnboardingLoginSucess {
    
  static func trackOnboardingLoginSucess() {
      let key = "onboarding-login-sucess"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOpenedPicker = Analytics
extension AnalyticsOpenedPicker {
    
  static func trackOpenedPicker() {
      let key = "Opened Picker"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingProfileSkip = Analytics
extension AnalyticsOnboardingProfileSkip {
    
  static func trackOnboardingProfileSkip() {
      let key = "onboarding-profile-skip"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingProfileSubmit = Analytics
extension AnalyticsOnboardingProfileSubmit {
    
  static func trackOnboardingProfileSubmit(name:String?,  gender:String?,  size:String? ) {
      let key = "onboarding-profile-submit"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let name = name {
          properties["name"] = name
      }
      if let gender = gender {
          properties["gender"] = gender
      }
      if let size = size {
          properties["size"] = size
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingRegisterEmailCancel = Analytics
extension AnalyticsOnboardingRegisterEmailCancel {
    
  static func trackOnboardingRegisterEmailCancel() {
      let key = "onboarding-register-emailCancel"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingRegisterEmailSent = Analytics
extension AnalyticsOnboardingRegisterEmailSent {
    
  static func trackOnboardingRegisterEmailSent() {
      let key = "onboarding-register-emailSent"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingRegisterSucess = Analytics
extension AnalyticsOnboardingRegisterSucess {
    
  static func trackOnboardingRegisterSucess() {
      let key = "onboarding-register-sucess"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingSkipped = Analytics
extension AnalyticsOnboardingSkipped {
    
  static func trackOnboardingSkipped() {
      let key = "onboarding-skipped"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingStarted = Analytics
extension AnalyticsOnboardingStarted {
    
  static func trackOnboardingStarted() {
      let key = "Started Tutorial"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsStartedOnboarding = Analytics
extension AnalyticsStartedOnboarding {
    
  static func trackStartedOnboarding() {
      let key = "onboarding-started"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingSubmittedEmailPrivacy = Analytics
extension AnalyticsOnboardingSubmittedEmailPrivacy {
    
  static func trackOnboardingSubmittedEmailPrivacy() {
      let key = "onboarding Submitted email privacy"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingSubmittedEmailTOS = Analytics
extension AnalyticsOnboardingSubmittedEmailTOS {
    
  static func trackOnboardingSubmittedEmailTOS() {
      let key = "onboarding Submitted email TOS"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOnboardingWelcome = Analytics
extension AnalyticsOnboardingWelcome {
    
  static func trackOnboardingWelcome() {
      let key = "onboarding welcome"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductBurrowConvertedToScreenshot = Analytics
extension AnalyticsProductBurrowConvertedToScreenshot {
    
  static func trackProductBurrowConvertedToScreenshot(shoppable:Shoppable? ) {
      let key = "product-burrow-convertedToScreenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      if let value = properties["product-imageURL"] {
        fbProperties[FBSDKAppEventParameterNameContentID] = value
      }
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameViewedContent, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductBurrowDelete = Analytics
extension AnalyticsProductBurrowDelete {
    
  static func trackProductBurrowDelete(shoppable:Shoppable? ) {
      let key = "product-burrow-delete"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      if let value = properties["product-imageURL"] {
        fbProperties[FBSDKAppEventParameterNameContentID] = value
      }
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameViewedContent, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductBurrow = Analytics
extension AnalyticsProductBurrow {
  enum AnalyticsProductBurrowSort : String{
    case `priceHighToLow` = "price high to low"
    case `priceLowToHigh` = "price low to high"
    case `similar` = "similar"
    case `brands` = "brands"
    }
    
  static func trackProductBurrow(product:Product?,  order:Int?,  sort:AnalyticsProductBurrowSort? ) {
      let key = "product-burrow"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let order = order {
          properties["order"] = NSNumber.init(value: order)
      }
      if let sort = sort {
          properties["sort"] = sort.rawValue
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      if let value = properties["product-imageURL"] {
        fbProperties[FBSDKAppEventParameterNameContentID] = value
      }
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameViewedContent, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)


      if let itemId =  properties["screenshot-id"] as? String {
          AnalyticsTrackers.autoGeneratedCodeApi.recombee.track(event:.detailView, itemId:itemId)
      }

      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductAddedToCart = Analytics
extension AnalyticsProductAddedToCart {
    
  static func trackProductAddedToCart(cartItem:CartItem? ) {
      let key = "product added to cart"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductCartQuanityStepDown = Analytics
extension AnalyticsProductCartQuanityStepDown {
    
  static func trackProductCartQuanityStepDown(cartItem:CartItem? ) {
      let key = "product-cart-quanity-stepDown"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductCartQuanityStepUp = Analytics
extension AnalyticsProductCartQuanityStepUp {
    
  static func trackProductCartQuanityStepUp(cartItem:CartItem? ) {
      let key = "product-cart-quanity-stepUp"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductQuantityChanged = Analytics
extension AnalyticsProductQuantityChanged {
    
  static func trackProductQuantityChanged(cartItem:CartItem?,  from:Int? ) {
      let key = "Product quantity changed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
      if let from = from {
          properties["from"] = NSNumber.init(value: from)
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductRemovedFromCart = Analytics
extension AnalyticsProductRemovedFromCart {
    
  static func trackProductRemovedFromCart(cartItem:CartItem? ) {
      let key = "product removed from cart"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductVariantChanged = Analytics
extension AnalyticsProductVariantChanged {
    
  static func trackProductVariantChanged(cartItem:CartItem?,  fromSize:String?,  fromColor:String? ) {
      let key = "Product variant changed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let cartItem = cartItem {
          propertiesFor(cartItem).forEach { properties[$0] = $1 }
      }
      if let fromSize = fromSize {
          properties["fromSize"] = fromSize
      }
      if let fromColor = fromColor {
          properties["fromColor"] = fromColor
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductOpened = Analytics
extension AnalyticsProductOpened {
  enum AnalyticsProductOpenedSort : String{
    case `priceHighToLow` = "price high to low"
    case `priceLowToHigh` = "price low to high"
    case `similar` = "similar"
    case `brands` = "brands"
    }
  enum AnalyticsProductOpenedDisplayAs : String{
    case `productPage` = "productPage"
    case `error` = "error"
    case `embededSafari` = "embededSafari"
    case `safari` = "safari"
    case `chrome` = "chrome"
    }
  enum AnalyticsProductOpenedFromPage : String{
    case `favorite` = "Favorite"
    case `products` = "Products"
    case `productBar` = "ProductBar"
    case `burrownMain` = "burrownMain"
    case `burrowList` = "burrowList"
    }
    
  static func trackProductOpened(product:Product?,  order:Int?,  sort:AnalyticsProductOpenedSort?,  displayAs:AnalyticsProductOpenedDisplayAs?,  fromPage:AnalyticsProductOpenedFromPage? ) {
      let key = "product buy now"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let order = order {
          properties["order"] = NSNumber.init(value: order)
      }
      if let sort = sort {
          properties["sort"] = sort.rawValue
      }
      if let displayAs = displayAs {
          properties["displayAs"] = displayAs.rawValue
      }
      if let fromPage = fromPage {
          properties["page"] = fromPage.rawValue
      }
            
      var fbProperties:[AnyHashable:Any] = [:]
      if let value = properties["product-imageURL"] {
        fbProperties[FBSDKAppEventParameterNameContentID] = value
      }
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameViewedContent, parameters: fbProperties)


      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)


      if let itemId =  properties["screenshot-id"] as? String {
          AnalyticsTrackers.autoGeneratedCodeApi.recombee.track(event:.addToCart, itemId:itemId)
      }

      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductFavorited = Analytics
extension AnalyticsProductFavorited {
  enum AnalyticsProductFavoritedPage : String{
    case `productList` = "productList"
    case `favorites` = "favorites"
    case `productWebView` = "Product Web View"
    case `product` = "product"
    case `cart` = "cart"
    }
    
  static func trackProductFavorited(product:Product?,  page:AnalyticsProductFavoritedPage ) {
      let key = "Product favorited"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      properties["page"] = page.rawValue
            
      var fbProperties:[AnyHashable:Any] = [:]
      fbProperties[FBSDKAppEventParameterNameSuccess] = FBSDKAppEventParameterValueNo
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameAddedToWishlist, parameters: fbProperties)


      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["screenshot"] == nil {
            properties["screenshot"] = a
        }
      }
      if let a = properties["product-brand"] {
        if properties["brand"] == nil {
            properties["brand"] = a
        }
      }
      if let a = properties["product-imageURL"] {
        if properties["imageUrl"] == nil {
            properties["imageUrl"] = a
        }
      }
      if let a = properties["product-price"] {
        if properties["price"] == nil {
            properties["price"] = a
        }
      }
      if let a = properties["product-merchant"] {
        if properties["merchant"] == nil {
            properties["merchant"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)


      if let itemId =  properties["screenshot-id"] as? String {
          AnalyticsTrackers.autoGeneratedCodeApi.recombee.track(event:.addBookmark, itemId:itemId)
      }

      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertOpened = Analytics
extension AnalyticsProductPriceAlertOpened {
    
  static func trackProductPriceAlertOpened(product:Product? ) {
      let key = "product-priceAlert-opened"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertRecieved = Analytics
extension AnalyticsProductPriceAlertRecieved {
    
  static func trackProductPriceAlertRecieved(product:Product? ) {
      let key = "product-priceAlert-recieved"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertSubscribedError = Analytics
extension AnalyticsProductPriceAlertSubscribedError {
    
  static func trackProductPriceAlertSubscribedError(product:Product?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "product-priceAlert-subscribed-error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertSubscribed = Analytics
extension AnalyticsProductPriceAlertSubscribed {
    
  static func trackProductPriceAlertSubscribed(product:Product? ) {
      let key = "product-priceAlert-subscribed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertUnsubscribedError = Analytics
extension AnalyticsProductPriceAlertUnsubscribedError {
    
  static func trackProductPriceAlertUnsubscribedError(product:Product?,  domain:String?,  code:Int?,  localizedDescription:String? ) {
      let key = "product-priceAlert-unsubscribed-error"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let domain = domain {
          properties["domain"] = domain
      }
      if let code = code {
          properties["code"] = NSNumber.init(value: code)
      }
      if let localizedDescription = localizedDescription {
          properties["localizedDescription"] = localizedDescription
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductPriceAlertUnsubscribed = Analytics
extension AnalyticsProductPriceAlertUnsubscribed {
    
  static func trackProductPriceAlertUnsubscribed(product:Product? ) {
      let key = "product-priceAlert-unsubscribed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductShareSocial = Analytics
extension AnalyticsProductShareSocial {
    
  static func trackProductShareSocial(product:Product? ) {
      let key = "Product Share Social"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.branch.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "branch", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductShareButtonPressed = Analytics
extension AnalyticsProductShareButtonPressed {
    
  static func trackProductShareButtonPressed(product:Product? ) {
      let key = "Product Share button pressed"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTappedOnProductByBrand = Analytics
extension AnalyticsTappedOnProductByBrand {
  enum AnalyticsTappedOnProductByBrandBrand : String{
    case `boohoo` = "boohoo"
    case `missguided` = "missguided"
    case `forever21` = "forever 21"
    case `asos` = "asos"
    case `freePeople` = "free people"
    case `urbanOutfitters` = "urban outfitters"
    case `riverIsland` = "river island"
    case `bdg` = "bdg"
    case `tommyHilfiger` = "tommy hilfiger"
    case `nbd` = "nbd"
    case `yooxcom` = "yoox.com"
    case `revolve` = "revolve"
    case `nordstrom` = "nordstrom"
    }
    
  static func trackTappedOnProductByBrand(product:Product?,  brand:AnalyticsTappedOnProductByBrandBrand ) {
      let key = String.init(format: "Tapped on %@ product" , brand.rawValue)
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      properties["brand"] = brand.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductForEmail = Analytics
extension AnalyticsProductForEmail {
    
  static func trackProductForEmail(product:Product?,  email:String? ) {
      let key = "Product for email"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      if let email = email {
          properties["email"] = email
      }
            

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["screenshot"] == nil {
            properties["screenshot"] = a
        }
      }
      if let a = properties["product-brand"] {
        if properties["brand"] == nil {
            properties["brand"] = a
        }
      }
      if let a = properties["product-imageURL"] {
        if properties["imageUrl"] == nil {
            properties["imageUrl"] = a
        }
      }
      if let a = properties["product-offerUrl"] {
        if properties["url"] == nil {
            properties["url"] = a
        }
      }
      if let a = properties["product-price"] {
        if properties["price"] == nil {
            properties["price"] = a
        }
      }
      if let a = properties["product-merchant"] {
        if properties["merchant"] == nil {
            properties["merchant"] = a
        }
      }
      if let a = properties["product-brandOrMerchant"] {
        if properties["title"] == nil {
            properties["title"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsProductUnfavorited = Analytics
extension AnalyticsProductUnfavorited {
  enum AnalyticsProductUnfavoritedPage : String{
    case `productList` = "productList"
    case `favorites` = "favorites"
    case `productWebView` = "Product Web View"
    case `product` = "product"
    case `cart` = "cart"
    }
    
  static func trackProductUnfavorited(product:Product?,  page:AnalyticsProductUnfavoritedPage ) {
      let key = "Product unfavorited"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let product = product {
          propertiesFor(product).forEach { properties[$0] = $1 }
      }
      properties["page"] = page.rawValue
            
      var fbProperties:[AnyHashable:Any] = [:]
      fbProperties[FBSDKAppEventParameterNameSuccess] = FBSDKAppEventParameterValueNo
      
       FBSDKAppEvents.logEvent(FBSDKAppEventNameAddedToWishlist, parameters: fbProperties)


      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["screenshot"] == nil {
            properties["screenshot"] = a
        }
      }
      if let a = properties["product-brand"] {
        if properties["brand"] == nil {
            properties["brand"] = a
        }
      }
      if let a = properties["product-imageURL"] {
        if properties["imageUrl"] == nil {
            properties["imageUrl"] = a
        }
      }
      if let a = properties["product-price"] {
        if properties["price"] == nil {
            properties["price"] = a
        }
      }
      if let a = properties["product-merchant"] {
        if properties["merchant"] == nil {
            properties["merchant"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAppOpenedFromPushNotification = Analytics
extension AnalyticsAppOpenedFromPushNotification {
    
  static func trackAppOpenedFromPushNotification(source:String? ) {
      let key = "pushNotification-opened"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let source = source {
          properties["source"] = source
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAppReceivedPushNotification = Analytics
extension AnalyticsAppReceivedPushNotification {
    
  static func trackAppReceivedPushNotification(source:String? ) {
      let key = "pushNotification-received"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      if let source = source {
          properties["source"] = source
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

  
typealias AnalyticsScreenshotCreatedPerCategory = Analytics
extension AnalyticsScreenshotCreatedPerCategory {
    
  static func trackScreenshotCreatedPerCategory(screenshot:Screenshot?,  category:String ) {
      let key = "screenshot-created-perCategory"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
      properties["category"] = category
            




      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:[])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotCreated = Analytics
extension AnalyticsScreenshotCreated {
    
  static func trackScreenshotCreated(screenshot:Screenshot? ) {
      let key = "screenshot-created"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotDeleted = Analytics
extension AnalyticsScreenshotDeleted {
  enum AnalyticsScreenshotDeletedKind : String{
    case `multi` = "multi"
    case `single` = "single"
    }
    
  static func trackScreenshotDeleted(screenshot:Screenshot?,  kind:AnalyticsScreenshotDeletedKind ) {
      let key = "Removed screenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
      properties["kind"] = kind.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotDeletedAll = Analytics
extension AnalyticsScreenshotDeletedAll {
  enum AnalyticsScreenshotDeletedAllKind : String{
    case `multi` = "multi"
    case `single` = "single"
    }
    
  static func trackScreenshotDeletedAll(amountJustDeleted:Int,  kind:AnalyticsScreenshotDeletedAllKind ) {
      let key = "screenshot-deletedAll"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["amountJustDeleted"] = NSNumber.init(value: amountJustDeleted)
      properties["kind"] = kind.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsMatchsticksFlagged = Analytics
extension AnalyticsMatchsticksFlagged {
  enum AnalyticsMatchsticksFlaggedWhy : String{
    case `inappropriate` = "Inappropriate"
    case `copyright` = "Copyright"
    case `badresults` = "Badresults"
    }
    
  static func trackMatchsticksFlagged(matchstick:Matchstick?,  why:AnalyticsMatchsticksFlaggedWhy ) {
      let key = "Matchsticks Flagged"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let matchstick = matchstick {
          propertiesFor(matchstick).forEach { properties[$0] = $1 }
      }
      properties["why"] = why.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsMatchsticksSkip = Analytics
extension AnalyticsMatchsticksSkip {
  enum AnalyticsMatchsticksSkipBy : String{
    case `swipe` = "swipe"
    case `tap` = "tap"
    }
    
  static func trackMatchsticksSkip(matchstick:Matchstick?,  by:AnalyticsMatchsticksSkipBy ) {
      let key = "Matchsticks Skip"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let matchstick = matchstick {
          propertiesFor(matchstick).forEach { properties[$0] = $1 }
      }
      properties["by"] = by.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)


      if let itemId =  properties["screenshot-id"] as? String {
          AnalyticsTrackers.autoGeneratedCodeApi.recombee.track(event:.negativeRating, itemId:itemId)
      }

      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsMatchsticksAdd = Analytics
extension AnalyticsMatchsticksAdd {
  enum AnalyticsMatchsticksAddBy : String{
    case `swipe` = "swipe"
    case `tap` = "tap"
    case `open` = "open"
    }
    
  static func trackMatchsticksAdd(matchstick:Matchstick?,  by:AnalyticsMatchsticksAddBy ) {
      let key = "Matchsticks Add"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let matchstick = matchstick {
          propertiesFor(matchstick).forEach { properties[$0] = $1 }
      }
      properties["by"] = by.rawValue
            

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["url"] == nil {
            properties["url"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)


      if let itemId =  properties["screenshot-id"] as? String {
          AnalyticsTrackers.autoGeneratedCodeApi.recombee.track(event:.positiveRating, itemId:itemId)
      }

      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotOpenedWithoutShoppables = Analytics
extension AnalyticsScreenshotOpenedWithoutShoppables {
    
  static func trackScreenshotOpenedWithoutShoppables(screenshot:Screenshot? ) {
      let key = "Screenshot Opened Without Shoppables"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotRelatedLookAdd = Analytics
extension AnalyticsScreenshotRelatedLookAdd {
    
  static func trackScreenshotRelatedLookAdd(url:String ) {
      let key = "screenshot-relatedLook-add"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["url"] = url
            

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["url"] == nil {
            properties["url"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsScreenshotRelatedLookFlagged = Analytics
extension AnalyticsScreenshotRelatedLookFlagged {
  enum AnalyticsScreenshotRelatedLookFlaggedWhy : String{
    case `inappropriate` = "Inappropriate"
    case `copyright` = "Copyright"
    case `duplicate` = "Duplicate"
    }
    
  static func trackScreenshotRelatedLookFlagged(url:String,  why:AnalyticsScreenshotRelatedLookFlaggedWhy ) {
      let key = "screenshot-relatedLook-flagged"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["url"] = url
      properties["why"] = why.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShareDiscover = Analytics
extension AnalyticsShareDiscover {
  enum AnalyticsShareDiscoverPage : String{
    case `productList` = "productList"
    case `screenshotList` = "screenshotList"
    }
    
  static func trackShareDiscover(screenshot:Screenshot?,  page:AnalyticsShareDiscoverPage ) {
      let key = "adding to discover"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
      properties["page"] = page.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.branch.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "branch", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShareError = Analytics
extension AnalyticsShareError {
  enum AnalyticsShareErrorErrorTpye : String{
    case `alreadyShared` = "already shared"
    }
    
  static func trackShareError(screenshot:Screenshot?,  errorTpye:AnalyticsShareErrorErrorTpye ) {
      let key = "Share incomplete"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
      properties["errorTpye"] = errorTpye.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShareSocial = Analytics
extension AnalyticsShareSocial {
    
  static func trackShareSocial(screenshot:Screenshot? ) {
      let key = "Share Social"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.branch.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "branch", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsSharedScreenshotStarted = Analytics
extension AnalyticsSharedScreenshotStarted {
    
  static func trackSharedScreenshotStarted(screenshot:Screenshot? ) {
      let key = "Shared screenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShuffledAScreenshot = Analytics
extension AnalyticsShuffledAScreenshot {
    
  static func trackShuffledAScreenshot(screenshot:Screenshot? ) {
      let key = "Shuffled a screenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsOpenedScreenshot = Analytics
extension AnalyticsOpenedScreenshot {
  enum AnalyticsOpenedScreenshotSource : String{
    case `list` = "list"
    case `discover` = "discover"
    case `relatedLooks` = "relatedLooks"
    }
    
  static func trackOpenedScreenshot(screenshot:Screenshot?,  source:AnalyticsOpenedScreenshotSource? ) {
      let key = "Tapped on screenshot"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let screenshot = screenshot {
          propertiesFor(screenshot).forEach { properties[$0] = $1 }
      }
      if let source = source {
          properties["source"] = source.rawValue
      }
            

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["screenshot"] == nil {
            properties["screenshot"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.kochava.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "kochava", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableScrolledFirstTime = Analytics
extension AnalyticsShoppableScrolledFirstTime {
    
  static func trackShoppableScrolledFirstTime(shoppable:Shoppable?,  rating:String?,  screenshot:String?,  category:String?,  augmentedOffersUrl:String? ) {
      let key = "Shoppable scrolled first time"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
      if let rating = rating {
          properties["Rating"] = rating
      }
      if let screenshot = screenshot {
          properties["Screenshot"] = screenshot
      }
      if let category = category {
          properties["Category"] = category
      }
      if let augmentedOffersUrl = augmentedOffersUrl {
          properties["AugmentedOffersUrl"] = augmentedOffersUrl
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableFeedbackNegative = Analytics
extension AnalyticsShoppableFeedbackNegative {
    
  static func trackShoppableFeedbackNegative(shoppable:Shoppable?,  text:String ) {
      let key = "Shoppable Feedback Negative"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
      properties["text"] = text
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableRatingNegative = Analytics
extension AnalyticsShoppableRatingNegative {
    
  static func trackShoppableRatingNegative(shoppable:Shoppable? ) {
      let key = "Shoppable rating negative"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            
      // these properities are always sent

      properties["Rating"] = 1

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["Screenshot"] == nil {
            properties["Screenshot"] = a
        }
      }
      if let a = properties["shoppable-category"] {
        if properties["Category"] == nil {
            properties["Category"] = a
        }
      }
      if let a = properties["shoppable-offerURL"] {
        if properties["AugmentedOffersUrl"] == nil {
            properties["AugmentedOffersUrl"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableRatingPositive = Analytics
extension AnalyticsShoppableRatingPositive {
    
  static func trackShoppableRatingPositive(shoppable:Shoppable? ) {
      let key = "Shoppable rating positive"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            
      // these properities are always sent

      properties["Rating"] = 5

      // Aliases used to keep reverse compatability
      if let a = properties["screenshot-imageURL"] {
        if properties["Screenshot"] == nil {
            properties["Screenshot"] = a
        }
      }
      if let a = properties["shoppable-category"] {
        if properties["Category"] == nil {
            properties["Category"] = a
        }
      }
      if let a = properties["shoppable-offerURL"] {
        if properties["AugmentedOffersUrl"] == nil {
            properties["AugmentedOffersUrl"] = a
        }
      }
      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: true)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableRelatedLooksLoaded = Analytics
extension AnalyticsShoppableRelatedLooksLoaded {
    
  static func trackShoppableRelatedLooksLoaded(shoppable:Shoppable? ) {
      let key = "shoppable-relatedLooks-loaded"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.branch.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "branch", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsShoppableRelatedLooksNotLoaded = Analytics
extension AnalyticsShoppableRelatedLooksNotLoaded {
    
  static func trackShoppableRelatedLooksNotLoaded(shoppable:Shoppable? ) {
      let key = "shoppable-relatedLooks-notLoaded"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.branch.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "branch", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTappedOnShoppable = Analytics
extension AnalyticsTappedOnShoppable {
    
  static func trackTappedOnShoppable(shoppable:Shoppable? ) {
      let key = "Tapped on shoppable"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }



      if let shoppable = shoppable {
          propertiesFor(shoppable).forEach { properties[$0] = $1 }
      }
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTimedLocalNotificationCancelled = Analytics
extension AnalyticsTimedLocalNotificationCancelled {
  enum AnalyticsTimedLocalNotificationCancelledSource : String{
    case `inactivityDiscover` = "inactivityDiscover"
    case `favoritedItem` = "favoritedItem"
    case `tappedProduct` = "tappedProduct"
    case `saleCount` = "saleCount"
    }
    
  static func trackTimedLocalNotificationCancelled(source:AnalyticsTimedLocalNotificationCancelledSource ) {
      let key = "timedNotification-local-cancelled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["source"] = source.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsAppOpenedFromTimedLocalNotification = Analytics
extension AnalyticsAppOpenedFromTimedLocalNotification {
  enum AnalyticsAppOpenedFromTimedLocalNotificationSource : String{
    case `inactivityDiscover` = "inactivityDiscover"
    case `favoritedItem` = "favoritedItem"
    case `tappedProduct` = "tappedProduct"
    case `saleCount` = "saleCount"
    }
    
  static func trackAppOpenedFromTimedLocalNotification(source:AnalyticsAppOpenedFromTimedLocalNotificationSource ) {
      let key = "timedNotification-local-opened"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["source"] = source.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 
typealias AnalyticsTimedLocalNotificationScheduled = Analytics
extension AnalyticsTimedLocalNotificationScheduled {
  enum AnalyticsTimedLocalNotificationScheduledSource : String{
    case `inactivityDiscover` = "inactivityDiscover"
    case `favoritedItem` = "favoritedItem"
    case `tappedProduct` = "tappedProduct"
    case `saleCount` = "saleCount"
    }
    
  static func trackTimedLocalNotificationScheduled(source:AnalyticsTimedLocalNotificationScheduledSource ) {
      let key = "timedNotification-local-scheduled"
      var properties:[String:Any] = [:]
      propertiesForAllEvents().forEach { properties[$0] = $1 }


      properties["source"] = source.rawValue
            

      AnalyticsTrackers.autoGeneratedCodeApi.appsee.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)
      AnalyticsTrackers.autoGeneratedCodeApi.amplitude.track(key, properties: properties, sendEvenIfAdvertisingTrackingIsOptOut: false)



      Analytics.debugShowLoggedAnalytics(eventName: key, properties: properties, destinations:["appsee", "amplitude" ])
      //edit properties after sent them to supress complier warning if unused
      properties["_______"] = ""
  
  }
}

 